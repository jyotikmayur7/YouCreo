// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/VideoService.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_CreateVideo_FullMethodName  = "/api.VideoService/CreateVideo"
	VideoService_DeleteVideo_FullMethodName  = "/api.VideoService/DeleteVideo"
	VideoService_SteamVideo_FullMethodName   = "/api.VideoService/SteamVideo"
	VideoService_UpdateVideo_FullMethodName  = "/api.VideoService/UpdateVideo"
	VideoService_GetAllVideos_FullMethodName = "/api.VideoService/GetAllVideos"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	CreateVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_CreateVideoClient, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
	SteamVideo(ctx context.Context, in *StreamVideoRequest, opts ...grpc.CallOption) (VideoService_SteamVideoClient, error)
	UpdateVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_UpdateVideoClient, error)
	GetAllVideos(ctx context.Context, in *GetAllVideosRequest, opts ...grpc.CallOption) (VideoService_GetAllVideosClient, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) CreateVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_CreateVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[0], VideoService_CreateVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceCreateVideoClient{stream}
	return x, nil
}

type VideoService_CreateVideoClient interface {
	Send(*CreateVideoRequest) error
	CloseAndRecv() (*CreateVideoResponse, error)
	grpc.ClientStream
}

type videoServiceCreateVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceCreateVideoClient) Send(m *CreateVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServiceCreateVideoClient) CloseAndRecv() (*CreateVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) SteamVideo(ctx context.Context, in *StreamVideoRequest, opts ...grpc.CallOption) (VideoService_SteamVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[1], VideoService_SteamVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceSteamVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoService_SteamVideoClient interface {
	Recv() (*StreamVideoResponse, error)
	grpc.ClientStream
}

type videoServiceSteamVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceSteamVideoClient) Recv() (*StreamVideoResponse, error) {
	m := new(StreamVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) UpdateVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_UpdateVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[2], VideoService_UpdateVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceUpdateVideoClient{stream}
	return x, nil
}

type VideoService_UpdateVideoClient interface {
	Send(*UpdateVideoRequest) error
	CloseAndRecv() (*UpdateVideoResponse, error)
	grpc.ClientStream
}

type videoServiceUpdateVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceUpdateVideoClient) Send(m *UpdateVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServiceUpdateVideoClient) CloseAndRecv() (*UpdateVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) GetAllVideos(ctx context.Context, in *GetAllVideosRequest, opts ...grpc.CallOption) (VideoService_GetAllVideosClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[3], VideoService_GetAllVideos_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceGetAllVideosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoService_GetAllVideosClient interface {
	Recv() (*GetAllVideosResponse, error)
	grpc.ClientStream
}

type videoServiceGetAllVideosClient struct {
	grpc.ClientStream
}

func (x *videoServiceGetAllVideosClient) Recv() (*GetAllVideosResponse, error) {
	m := new(GetAllVideosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	CreateVideo(VideoService_CreateVideoServer) error
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	SteamVideo(*StreamVideoRequest, VideoService_SteamVideoServer) error
	UpdateVideo(VideoService_UpdateVideoServer) error
	GetAllVideos(*GetAllVideosRequest, VideoService_GetAllVideosServer) error
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) CreateVideo(VideoService_CreateVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedVideoServiceServer) DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoServiceServer) SteamVideo(*StreamVideoRequest, VideoService_SteamVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method SteamVideo not implemented")
}
func (UnimplementedVideoServiceServer) UpdateVideo(VideoService_UpdateVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetAllVideos(*GetAllVideosRequest, VideoService_GetAllVideosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllVideos not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_CreateVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).CreateVideo(&videoServiceCreateVideoServer{stream})
}

type VideoService_CreateVideoServer interface {
	SendAndClose(*CreateVideoResponse) error
	Recv() (*CreateVideoRequest, error)
	grpc.ServerStream
}

type videoServiceCreateVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceCreateVideoServer) SendAndClose(m *CreateVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServiceCreateVideoServer) Recv() (*CreateVideoRequest, error) {
	m := new(CreateVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideo(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_SteamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoServiceServer).SteamVideo(m, &videoServiceSteamVideoServer{stream})
}

type VideoService_SteamVideoServer interface {
	Send(*StreamVideoResponse) error
	grpc.ServerStream
}

type videoServiceSteamVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceSteamVideoServer) Send(m *StreamVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoService_UpdateVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).UpdateVideo(&videoServiceUpdateVideoServer{stream})
}

type VideoService_UpdateVideoServer interface {
	SendAndClose(*UpdateVideoResponse) error
	Recv() (*UpdateVideoRequest, error)
	grpc.ServerStream
}

type videoServiceUpdateVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceUpdateVideoServer) SendAndClose(m *UpdateVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServiceUpdateVideoServer) Recv() (*UpdateVideoRequest, error) {
	m := new(UpdateVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoService_GetAllVideos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllVideosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoServiceServer).GetAllVideos(m, &videoServiceGetAllVideosServer{stream})
}

type VideoService_GetAllVideosServer interface {
	Send(*GetAllVideosResponse) error
	grpc.ServerStream
}

type videoServiceGetAllVideosServer struct {
	grpc.ServerStream
}

func (x *videoServiceGetAllVideosServer) Send(m *GetAllVideosResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoService_DeleteVideo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateVideo",
			Handler:       _VideoService_CreateVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SteamVideo",
			Handler:       _VideoService_SteamVideo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateVideo",
			Handler:       _VideoService_UpdateVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllVideos",
			Handler:       _VideoService_GetAllVideos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/VideoService.proto",
}
