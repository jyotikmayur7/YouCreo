syntax = "proto3";
package api;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/jyotikmayur7/YouCreo/VideoService";
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
      title: "Video Service API";
      version: "0.1";
    };
    schemes: [HTTPS, HTTP];
    consumes: "application/json";
    produces: ["application/json"];
   };
   
service VideoService{
    rpc AddVideo (AddVideoRequest) returns (AddVideoResponse){
        option (google.api.http) = {
            post : "/v1/video"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Add Video",
            description: "Upload video content on the channel as content creator",
            tags: "Videos";
          };
    };

    rpc DeleteVideo (DeleteVideoRequest) returns (DeleteVideoResponse){
        option (google.api.http) = {
            delete : "/v1/video/{video_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Delete Video",
            description: "Remove video content from the channel as content creator",
            tags: "Videos";
          };
    };

    rpc SteamVideo (StreamVideoRequest) returns (StreamVideoResponse){
        option (google.api.http) = {
            get : "/v1/video/{video_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Stream Video",
            description: "Stream video from backend to frontend",
            tags: "Videos";
          };
    }

    rpc ChangeResolution (ChangeResolutionRequest) returns (ChangeResolutionResponse){
        option (google.api.http) = {
            put : "/v1/video/{video_id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Change Resolution",
            description: "Change resolution of the current streaming video",
            tags: "Videos";
          };
    }

    rpc TakedownVideo (TakedownVideoRequest) returns (TakedownVideoResponse){
        option (google.api.http) = {
            delete : "/v1/video/{video_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Takedown Video",
            description: "Removing video content as Admin",
            tags: "Videos";
          };
    }

    rpc GetAllUploadedVideos (GetAllUploadedVideosRequest) returns (GetAllUploadedVideosResponse){
        option (google.api.http) = {
            get : "/v1/video"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Get all uploaded videos",
            description: "Get all uploaded videos on the content creator dashboard",
            tags: "Videos";
          };
    } 
}


message AddVideoRequest{
    string videoTitle = 1;
    string videoDescription = 2;
    string publishedTime = 3;
    string publishedDate = 4;
    bytes videoContent = 5;
}

message AddVideoResponse{}

message DeleteVideoRequest{
    string video_id = 1;
}

message DeleteVideoResponse{}

message StreamVideoRequest{
    string video_id = 1;
    string resolution = 2;
}

message StreamVideoResponse{
    bytes videoStream = 1;
    string videoTitle = 2;
    string videoDescription = 3;
    string publishedTime = 4;
    string publishedDate = 5;
    string likesCount = 6;
    string viewCount = 7;
    string resolution = 8;
}

message ChangeResolutionRequest{
    string video_id = 1;
    string newResolution = 2;
}

message ChangeResolutionResponse{}

message TakedownVideoRequest{
    string video_id = 1;
}

message TakedownVideoResponse{}

message Video {
    string videoTitle = 1;
    string videoDescription = 2;
    string publishedTime = 3;
    string publishedDate = 4;
    string likesCount = 5;
    string viewCount = 6;
}

message GetAllUploadedVideosRequest{
    string page_size = 1;
    string page_token = 2;
}

message GetAllUploadedVideosResponse{
    repeated Video video = 1;
    string next_page_token = 2;
}